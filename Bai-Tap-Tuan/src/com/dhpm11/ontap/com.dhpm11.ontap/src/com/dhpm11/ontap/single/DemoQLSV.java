/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dhpm11.ontap.single;

import com.mysql.jdbc.Connection;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Suong
 */
public class DemoQLSV extends javax.swing.JFrame {

    DefaultTableModel defaultTableModel = new DefaultTableModel();
    String pathHinhAnh;

    /**
     * Creates new form DemoQLSV
     */
    public DemoQLSV() {
        initComponents();
        showData();
        removeToDefault();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupGioiTinh = new javax.swing.ButtonGroup();
        pnMain = new javax.swing.JPanel();
        pnTren = new javax.swing.JPanel();
        lblQuanLySinhVien = new javax.swing.JLabel();
        pnDuoi = new javax.swing.JPanel();
        jScrollPaneThongTin = new javax.swing.JScrollPane();
        tblThongTin = new javax.swing.JTable();
        pnGiua = new javax.swing.JPanel();
        lblMaSV = new javax.swing.JLabel();
        txtMaSV = new javax.swing.JTextField();
        lblTen = new javax.swing.JLabel();
        txtTen = new javax.swing.JTextField();
        lblLop = new javax.swing.JLabel();
        cbLop = new javax.swing.JComboBox<>();
        lblNgaySinh = new javax.swing.JLabel();
        dtNgaySinh = new com.toedter.calendar.JDateChooser();
        lblGioiTinh = new javax.swing.JLabel();
        rbNam = new javax.swing.JRadioButton();
        rbNu = new javax.swing.JRadioButton();
        lblSdt = new javax.swing.JLabel();
        txtSdt = new javax.swing.JTextField();
        lblDiaChi = new javax.swing.JLabel();
        jScrollPaneDiaChi = new javax.swing.JScrollPane();
        txtDiaChi = new javax.swing.JTextArea();
        lblTrangThai = new javax.swing.JLabel();
        chkTrangThai = new javax.swing.JCheckBox();
        pnThaoTac = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnMacDinh = new javax.swing.JButton();
        lblHinh = new javax.swing.JLabel();
        btnChonHinh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnMain.setLayout(new java.awt.BorderLayout());

        lblQuanLySinhVien.setText("Quản Lý Sinh Viên");
        pnTren.add(lblQuanLySinhVien);

        pnMain.add(pnTren, java.awt.BorderLayout.PAGE_START);

        tblThongTin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SV", "Tên", "Lớp", "Ngày sinh", "Giới tính", "SĐT", "Địa chỉ", "Trạng thái"
            }
        ));
        tblThongTin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblThongTinMouseClicked(evt);
            }
        });
        tblThongTin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblThongTinKeyReleased(evt);
            }
        });
        jScrollPaneThongTin.setViewportView(tblThongTin);

        javax.swing.GroupLayout pnDuoiLayout = new javax.swing.GroupLayout(pnDuoi);
        pnDuoi.setLayout(pnDuoiLayout);
        pnDuoiLayout.setHorizontalGroup(
            pnDuoiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDuoiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneThongTin, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnDuoiLayout.setVerticalGroup(
            pnDuoiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDuoiLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPaneThongTin, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnMain.add(pnDuoi, java.awt.BorderLayout.PAGE_END);

        lblMaSV.setText("Mã SV");

        lblTen.setText("Tên");

        lblLop.setText("Lớp");

        cbLop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "11DHPM", "11DHMMT", "11QTKD" }));

        lblNgaySinh.setText("Ngày sinh");

        lblGioiTinh.setText("Giới tính");

        btnGroupGioiTinh.add(rbNam);
        rbNam.setText("Nam");

        btnGroupGioiTinh.add(rbNu);
        rbNu.setText("Nữ");

        lblSdt.setText("SĐT");

        lblDiaChi.setText("Địa chỉ");

        txtDiaChi.setColumns(20);
        txtDiaChi.setRows(5);
        jScrollPaneDiaChi.setViewportView(txtDiaChi);

        lblTrangThai.setText("Trạng Thái");

        chkTrangThai.setText("Còn học");

        pnThaoTac.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)), "Chọn thao tác"));

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnMacDinh.setText("Mặc định");
        btnMacDinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMacDinhActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnThaoTacLayout = new javax.swing.GroupLayout(pnThaoTac);
        pnThaoTac.setLayout(pnThaoTacLayout);
        pnThaoTacLayout.setHorizontalGroup(
            pnThaoTacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnThaoTacLayout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(pnThaoTacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnMacDinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(41, 41, 41))
        );
        pnThaoTacLayout.setVerticalGroup(
            pnThaoTacLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnThaoTacLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(btnThem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSua)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnXoa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnMacDinh)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        lblHinh.setText("hinh");

        btnChonHinh.setText("Chọn hình");
        btnChonHinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChonHinhActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnGiuaLayout = new javax.swing.GroupLayout(pnGiua);
        pnGiua.setLayout(pnGiuaLayout);
        pnGiuaLayout.setHorizontalGroup(
            pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGiuaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTen)
                    .addComponent(lblLop)
                    .addComponent(lblNgaySinh)
                    .addComponent(lblGioiTinh)
                    .addComponent(lblSdt)
                    .addComponent(lblDiaChi)
                    .addComponent(lblTrangThai)
                    .addComponent(lblMaSV))
                .addGap(27, 27, 27)
                .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkTrangThai)
                    .addGroup(pnGiuaLayout.createSequentialGroup()
                        .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnGiuaLayout.createSequentialGroup()
                                .addComponent(rbNam)
                                .addGap(32, 32, 32)
                                .addComponent(rbNu))
                            .addComponent(txtMaSV, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtTen, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                                .addComponent(cbLop, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dtNgaySinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(32, 32, 32)
                        .addComponent(lblHinh, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnGiuaLayout.createSequentialGroup()
                            .addComponent(txtSdt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnChonHinh))
                        .addComponent(jScrollPaneDiaChi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(pnThaoTac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        pnGiuaLayout.setVerticalGroup(
            pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGiuaLayout.createSequentialGroup()
                .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnGiuaLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnGiuaLayout.createSequentialGroup()
                                .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblMaSV)
                                    .addComponent(txtMaSV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblTen)
                                    .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, 0)
                                .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblLop)
                                    .addComponent(cbLop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblNgaySinh)
                                    .addComponent(dtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblGioiTinh)
                                    .addComponent(rbNam)
                                    .addComponent(rbNu))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblSdt)
                                    .addComponent(txtSdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(pnGiuaLayout.createSequentialGroup()
                                .addComponent(lblHinh, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnChonHinh)
                                .addGap(14, 14, 14)))
                        .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDiaChi)
                            .addComponent(jScrollPaneDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pnThaoTac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnGiuaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTrangThai)
                    .addComponent(chkTrangThai))
                .addGap(19, 19, 19))
        );

        pnMain.add(pnGiua, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblThongTinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblThongTinMouseClicked
        int selectRow = tblThongTin.getSelectedRow();
        // LAY DU LIEU TRONG TABLE
        TableModel model = tblThongTin.getModel();

        txtMaSV.setText(model.getValueAt(selectRow, 0).toString());

        txtTen.setText(model.getValueAt(selectRow, 1).toString());

        String lop = model.getValueAt(selectRow, 2).toString();
        switch (lop) {
            case "11DHPM":
                cbLop.setSelectedIndex(0);
                break;
            case "11DHMMT":
                cbLop.setSelectedIndex(1);
                break;
            default:
                cbLop.setSelectedIndex(2);
                break;
        }

        try {
            String ngay_sinh = (String) model.getValueAt(selectRow, 3);
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date date = dateFormat.parse(ngay_sinh);
            dtNgaySinh.setDate(date);
        } catch (ParseException ex) {
            System.out.println("Lỗi dtNgaySinh trong tableMouseClick");
        }

        String gioi_tinh = model.getValueAt(selectRow, 4).toString().trim();
        if (gioi_tinh.equals("Nam")) {
            rbNam.setSelected(true);
            rbNu.setSelected(false);
        } else {
            rbNam.setSelected(false);
            rbNu.setSelected(true);
        }

        txtSdt.setText((String) model.getValueAt(selectRow, 5));

        txtDiaChi.setText((String) model.getValueAt(selectRow, 6));

        chkTrangThai.setSelected((boolean) model.getValueAt(selectRow, 7));

        // click đôi chuột
        if (evt.getClickCount() == 2) {
            int selectedCol = tblThongTin.getSelectedColumn();
            JOptionPane.showMessageDialog(null, defaultTableModel.getValueAt(selectRow, selectedCol));
        }
    }//GEN-LAST:event_tblThongTinMouseClicked

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
////        if (!txtMaSV.getText().trim().equals("")) {
//        if (kiemTraTonTai(Integer.parseInt(txtMaSV.getText().trim())) == false) {
//            int ret = JOptionPane.showConfirmDialog(null, "Muốn Thêm hả?", "Thêm", JOptionPane.YES_NO_OPTION);
//            if (ret == JOptionPane.YES_OPTION) {
//                Connection conn = null;
//                String url = "jdbc:mysql://localhost:3306/dbtest?useUnicode=true&characterEncoding=UTF-8";
//                String user = "root";
//                String pass = "";
//                String sql = "INSERT INTO `sinhvien`(`ma_sv`, `ten`, `lop`, `ngay_sinh`, `gioi_tinh`, `sdt`, `dia_chi`, `trang_thai`) VALUES (?,?,?,?,?,?,?,?)";
//                PreparedStatement pstmt;
//
//                try {
//                    conn = (Connection) DriverManager.getConnection(url, user, pass);
//                    pstmt = conn.prepareStatement(sql);
//                    pstmt.setInt(1, Integer.parseInt(txtMaSV.getText().trim()));
//
//                    pstmt.setString(2, txtTen.getText().trim());
//
//                    pstmt.setString(3, cbLop.getSelectedItem().toString().trim());
//
//                    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
//                    String ngaySinh = dateFormat.format(dtNgaySinh.getDate());
//                    pstmt.setString(4, ngaySinh);
//
//                    String gioiTinh = "";
//                    if (rbNam.isSelected()) {
//                        gioiTinh = rbNam.getText().trim();
//                    } else {
//                        gioiTinh = rbNu.getText().trim();
//                    }
//                    pstmt.setString(5, gioiTinh);
//
//                    pstmt.setString(6, txtSdt.getText().trim());
//                    pstmt.setString(7, txtDiaChi.getText().trim());
//                    pstmt.setBoolean(8, chkTrangThai.isSelected());
//                    int rs = pstmt.executeUpdate();
//                    System.out.println(rs);
//
//                    JOptionPane.showMessageDialog(null, "Thêm thành công!");
//                } catch (HeadlessException | NumberFormatException | SQLException e) {
//                    System.out.println("Lỗi Insert - MaSV nhập chuỗi!");
//                }
//                showData();
//            }
//        } else {
//            JOptionPane.showMessageDialog(null, "Mã đã tồn tại");
//        }
////        } else {
////            JOptionPane.showMessageDialog(null, "Mã không được để trống");
////        }



//        if (!txtMaSV.getText().trim().equals("")) {
        if (kiemTraTonTai(Integer.parseInt(txtMaSV.getText().trim())) == false) {
            int ret = JOptionPane.showConfirmDialog(null, "Muốn Thêm hả?", "Thêm", JOptionPane.YES_NO_OPTION);
            if (ret == JOptionPane.YES_OPTION) {
                Connection conn = null;
                String url = "jdbc:mysql://localhost:3306/dbtest?useUnicode=true&characterEncoding=UTF-8";
                String user = "root";
                String pass = "";
                String sql = "INSERT INTO `sinhvien`(`ma_sv`, `ten`, `lop`, `ngay_sinh`, `gioi_tinh`, `sdt`, `dia_chi`, `trang_thai`, `hinh`) VALUES (?,?,?,?,?,?,?,?,?)";
                PreparedStatement pstmt;

                try {
                    conn = (Connection) DriverManager.getConnection(url, user, pass);
                    pstmt = conn.prepareStatement(sql);
                    pstmt.setInt(1, Integer.parseInt(txtMaSV.getText().trim()));

                    pstmt.setString(2, txtTen.getText().trim());

                    pstmt.setString(3, cbLop.getSelectedItem().toString().trim());

                    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    String ngaySinh = dateFormat.format(dtNgaySinh.getDate());
                    pstmt.setString(4, ngaySinh);

                    String gioiTinh = "";
                    if (rbNam.isSelected()) {
                        gioiTinh = rbNam.getText().trim();
                    } else {
                        gioiTinh = rbNu.getText().trim();
                    }
                    pstmt.setString(5, gioiTinh);

                    pstmt.setString(6, txtSdt.getText().trim());
                    pstmt.setString(7, txtDiaChi.getText().trim());
                    pstmt.setBoolean(8, chkTrangThai.isSelected());
                    
                    try {
                        InputStream is = new FileInputStream(new File(pathHinhAnh));
                        pstmt.setBlob(9, is);
                    } catch (FileNotFoundException ex) {
                        System.out.println("Lỗi Insert Ảnh");
                    }
                    
                    int rs = pstmt.executeUpdate();
                    System.out.println(rs);

                    JOptionPane.showMessageDialog(null, "Thêm thành công!");
                } catch (HeadlessException | NumberFormatException | SQLException e) {
                    System.out.println("Lỗi Insert - MaSV nhập chuỗi!");
                }
                showData();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Mã đã tồn tại");
        }
//        } else {
//            JOptionPane.showMessageDialog(null, "Mã không được để trống");
//        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        if (kiemTraTonTai(Integer.parseInt(txtMaSV.getText().trim()))) {
            int ret = JOptionPane.showConfirmDialog(null, "Muốn Sửa hả?", "Sửa", JOptionPane.YES_NO_OPTION);
            if (ret == JOptionPane.YES_OPTION) {
                Connection conn = null;
                String url = "jdbc:mysql://localhost:3306/dbtest?useUnicode=true&characterEncoding=UTF-8";
                String user = "root";
                String pass = "";
                String sql = "UPDATE `sinhvien` SET `ten`=?,`lop`=?,`ngay_sinh`=?,`gioi_tinh`=?,`sdt`=?,`dia_chi`=?,`trang_thai`=? WHERE `ma_sv`=?";
                PreparedStatement pstmt;

                try {
                    conn = (Connection) DriverManager.getConnection(url, user, pass);
                    pstmt = conn.prepareStatement(sql);

                    pstmt.setString(1, txtTen.getText().trim());

                    pstmt.setString(2, cbLop.getSelectedItem().toString().trim());

                    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    String ngaySinh = dateFormat.format(dtNgaySinh.getDate());
                    pstmt.setString(3, ngaySinh);

                    String gioiTinh = "";
                    if (rbNam.isSelected()) {
                        gioiTinh = rbNam.getText().trim();
                    } else {
                        gioiTinh = rbNu.getText().trim();
                    }
                    pstmt.setString(4, gioiTinh);

                    pstmt.setString(5, txtSdt.getText().trim());
                    pstmt.setString(6, txtDiaChi.getText().trim());
                    pstmt.setBoolean(7, chkTrangThai.isSelected());
                    pstmt.setInt(8, Integer.parseInt(txtMaSV.getText().trim()));
                    int rs = pstmt.executeUpdate();
                    System.out.println(rs);

                    JOptionPane.showMessageDialog(null, "Sửa thành công!");
                } catch (HeadlessException | NumberFormatException | SQLException e) {
                    System.out.println("Lỗi Update - MaSV nhập chuỗi!");
                }
                showData();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Mã không tồn tại");
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        if (kiemTraTonTai(Integer.parseInt(txtMaSV.getText().trim()))) {
            int ret = JOptionPane.showConfirmDialog(null, "Muốn xóa hả?", "Xóa", JOptionPane.YES_NO_OPTION);
            if (ret == JOptionPane.YES_OPTION) {
                try {
                    Connection conn = null;
                    String url = "jdbc:mysql://localhost:3306/dbtest?useUnicode=true&characterEncoding=UTF-8";
                    String user = "root";
                    String pass = "";
                    PreparedStatement pstmt;
                    conn = (Connection) DriverManager.getConnection(url, user, pass);

                    int maSV = Integer.parseInt(txtMaSV.getText().trim());
                    String sql = "DELETE FROM `sinhvien` WHERE ma_sv = ?";
                    pstmt = conn.prepareStatement(sql);
                    pstmt.setInt(1, maSV);
                    int rs = pstmt.executeUpdate();
                    System.out.println(rs);
                    JOptionPane.showMessageDialog(null, "Xóa thành công");
                    showData();
                    removeToDefault();
                } catch (SQLException | NumberFormatException ex) {
                    System.out.println("Lỗi Delete , maSV nhập sai định dạng");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Mã Không tồn tại!");
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnMacDinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMacDinhActionPerformed
        removeToDefault();
    }//GEN-LAST:event_btnMacDinhActionPerformed

    private void tblThongTinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblThongTinKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            int selectRow = tblThongTin.getSelectedRow();
            // LAY DU LIEU TRONG TABLE
            TableModel model = tblThongTin.getModel();

            txtMaSV.setText(model.getValueAt(selectRow, 0).toString());

            txtTen.setText(model.getValueAt(selectRow, 1).toString());

            String lop = model.getValueAt(selectRow, 2).toString();
            switch (lop) {
                case "11DHPM":
                    cbLop.setSelectedIndex(0);
                    break;
                case "11DHMMT":
                    cbLop.setSelectedIndex(1);
                    break;
                default:
                    cbLop.setSelectedIndex(2);
                    break;
            }

            try {
                String ngay_sinh = (String) model.getValueAt(selectRow, 3);
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date date = dateFormat.parse(ngay_sinh);
                dtNgaySinh.setDate(date);
            } catch (ParseException ex) {
                System.out.println("Lỗi dtNgaySinh trong tableMouseClick");
            }

            String gioi_tinh = model.getValueAt(selectRow, 4).toString().trim();
            if (gioi_tinh.equals("Nam")) {
                rbNam.setSelected(true);
                rbNu.setSelected(false);
            } else {
                rbNam.setSelected(false);
                rbNu.setSelected(true);
            }

            txtSdt.setText((String) model.getValueAt(selectRow, 5));

            txtDiaChi.setText((String) model.getValueAt(selectRow, 6));

            chkTrangThai.setSelected((boolean) model.getValueAt(selectRow, 7));
        }
    }//GEN-LAST:event_tblThongTinKeyReleased

    private void btnChonHinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChonHinhActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.IMAGE", "jpg", "gif", "png");
        fileChooser.addChoosableFileFilter(filter);
        int result = fileChooser.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            lblHinh.setIcon(ResizeImage(path));
            pathHinhAnh = path;
        } else if (result == JFileChooser.CANCEL_OPTION) {
            System.out.println("No Data");
        }
    }//GEN-LAST:event_btnChonHinhActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DemoQLSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DemoQLSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DemoQLSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DemoQLSV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DemoQLSV().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChonHinh;
    private javax.swing.ButtonGroup btnGroupGioiTinh;
    private javax.swing.JButton btnMacDinh;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cbLop;
    private javax.swing.JCheckBox chkTrangThai;
    private com.toedter.calendar.JDateChooser dtNgaySinh;
    private javax.swing.JScrollPane jScrollPaneDiaChi;
    private javax.swing.JScrollPane jScrollPaneThongTin;
    private javax.swing.JLabel lblDiaChi;
    private javax.swing.JLabel lblGioiTinh;
    private javax.swing.JLabel lblHinh;
    private javax.swing.JLabel lblLop;
    private javax.swing.JLabel lblMaSV;
    private javax.swing.JLabel lblNgaySinh;
    private javax.swing.JLabel lblQuanLySinhVien;
    private javax.swing.JLabel lblSdt;
    private javax.swing.JLabel lblTen;
    private javax.swing.JLabel lblTrangThai;
    private javax.swing.JPanel pnDuoi;
    private javax.swing.JPanel pnGiua;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnThaoTac;
    private javax.swing.JPanel pnTren;
    private javax.swing.JRadioButton rbNam;
    private javax.swing.JRadioButton rbNu;
    private javax.swing.JTable tblThongTin;
    private javax.swing.JTextArea txtDiaChi;
    private javax.swing.JTextField txtMaSV;
    private javax.swing.JTextField txtSdt;
    private javax.swing.JTextField txtTen;
    // End of variables declaration//GEN-END:variables

    private void showData() {

        tblThongTin.setDefaultEditor(Object.class, null);
        defaultTableModel.setRowCount(0);
        List<SinhVienTest> listAll = getAll();
        defaultTableModel = (DefaultTableModel) tblThongTin.getModel();
        tblThongTin.getColumnModel().getColumn(7).setCellRenderer(tblThongTin.getDefaultRenderer(Boolean.class));
        Object[] row = new Object[8];
        for (int i = 0; i < listAll.size(); i++) {
            row[0] = listAll.get(i).getMaSV();
            row[1] = listAll.get(i).getTen();
            row[2] = listAll.get(i).getLop();
            row[3] = listAll.get(i).getNgaySinh();
            row[4] = listAll.get(i).getGioiTinh();
            row[5] = listAll.get(i).getSdt();
            row[6] = listAll.get(i).getDiaChi();
            row[7] = listAll.get(i).isTrangThai();
            defaultTableModel.addRow(row);
        }
    }

    private List<SinhVienTest> getAll() {
        List<SinhVienTest> listAll = new ArrayList<SinhVienTest>();

        Connection conn = null;
        String url = "jdbc:mysql://localhost:3306/dbtest?useUnicode=true&characterEncoding=UTF-8";
        String user = "root";
        String pass = "";
        String sql = "SELECT * FROM `sinhvien` WHERE 1";
        ResultSet rs;
        Statement stmt;

        try {
            conn = (Connection) DriverManager.getConnection(url, user, pass);
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);

            SinhVienTest result = null;
            while (rs.next()) {
                result = new SinhVienTest();
                result.setMaSV(rs.getInt("ma_sv"));
                result.setTen(rs.getString("ten"));
                result.setLop(rs.getString("lop"));
                result.setNgaySinh(rs.getString("ngay_sinh"));
                result.setGioiTinh(rs.getString("gioi_tinh"));
                result.setSdt(rs.getString("sdt"));
                result.setDiaChi(rs.getString("dia_chi"));
                result.setTrangThai(rs.getBoolean("trang_thai"));
                listAll.add(result);
            }
            conn.close();
            rs.close();
            stmt.close();

        } catch (SQLException ex) {
            System.out.println("Lỗi getAll()");
        }

        return listAll;
    }

    private void removeToDefault() {
        txtMaSV.setText("");
        txtTen.setText("");
        txtSdt.setText("");
        txtDiaChi.setText("");
        rbNam.setSelected(true);
        chkTrangThai.setSelected(true);
        dtNgaySinh.setCalendar(Calendar.getInstance());
        txtMaSV.requestFocus();
        tblThongTin.getSelectionModel().clearSelection();
    }

    private boolean kiemTraTonTai(int ma) {
        Connection conn = null;
        String url = "jdbc:mysql://localhost:3306/dbtest?useUnicode=true&characterEncoding=UTF-8";
        String user = "root";
        String pass = "";
        try {
            conn = (Connection) DriverManager.getConnection(url, user, pass);
            String sql = "SELECT `ma_sv` FROM `sinhvien` WHERE ma_sv = " + ma;
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                String name = rs.getString("ma_sv");
                System.out.println(name);
                return true;
            }
            conn.close();
            rs.close();
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(DemoQLSV.class.getName()).log(Level.SEVERE, null, ex);
        }

        return false;
    }

    private Icon ResizeImage(String imgPath) {
        ImageIcon MyImage = new ImageIcon(imgPath);
        Image img = MyImage.getImage();
        Image newImage = img.getScaledInstance(lblHinh.getWidth(), lblHinh.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImage);
        return image;
    }

}
