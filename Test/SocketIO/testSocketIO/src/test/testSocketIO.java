/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import io.socket.client.Manager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author Suong
 */
public class testSocketIO extends javax.swing.JFrame {

    private Socket socket = null;
    JSONObject led = new JSONObject();
    JSONArray arrayLed = new JSONArray();
    Client client = new Client();

    /**
     * Creates new form testSocketIO
     */
    public testSocketIO() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ledRed = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        ledGreen = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        ledYellow = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Test SocketIO");

        ledRed.setText("Đỏ");
        ledRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledRedActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        ledGreen.setText("Xanh");
        ledGreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledGreenActionPerformed(evt);
            }
        });

        jLabel2.setText("jLabel2");

        ledYellow.setText("Vàng");
        ledYellow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledYellowActionPerformed(evt);
            }
        });

        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ledYellow)
                    .addComponent(ledGreen)
                    .addComponent(ledRed))
                .addGap(100, 100, 100)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ledRed)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ledGreen)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ledYellow)
                    .addComponent(jLabel3))
                .addContainerGap(99, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ledRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledRedActionPerformed
        try {
            if (ledRed.isSelected()) {
                arrayLed.put(0, true);

                PrintWriter out = new PrintWriter(getSocket().getOutputStream(), true);
                BufferedReader in = new BufferedReader(new InputStreamReader(getSocket().getInputStream()));
                out.println("do 1");
                String retorno = in.readLine();
            } else {
                arrayLed.put(0, false);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ledRedActionPerformed

    private void ledGreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledGreenActionPerformed
        try {
            if (ledRed.isSelected()) {
                arrayLed.put(1, true);
            } else {
                arrayLed.put(1, false);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_ledGreenActionPerformed

    private void ledYellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledYellowActionPerformed
        try {
            if (ledRed.isSelected()) {
                arrayLed.put(2, true);
            } else {
                arrayLed.put(2, false);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_ledYellowActionPerformed

    // Conecta com o socket
    public void socketConnect(String ip, int port) throws UnknownHostException, IOException {
        System.out.println("Conectando socket...");
        this.socket = new Socket(ip, port);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(testSocketIO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(testSocketIO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(testSocketIO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testSocketIO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new testSocketIO().setVisible(true);
            }
        });

        String ip = "localhost";
        int port = 6969;

        Socket socket = new Socket(ip, port);
        
//        try {
//            JSONObject JSONObject; /*put*/
//            JSONObject = led.put("led", true);
//        } catch (JSONException e) {
//            e.printStackTrace();
//        }
        socket.close();

    }

    // escreve e recebe mensagem no socket
    public String echo(String massage) {
        try {

            // out & in 
            PrintWriter out = new PrintWriter(getSocket().getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(getSocket().getInputStream()));

            // escreve string no socket e lê linha
            out.println(massage);
            String str = in.readLine();
            return str;

        } catch (IOException e) {
            e.printStackTrace();
        }

        return null;
    }

    // obtem instância do socket
    private Socket getSocket() {
        return socket;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton ledGreen;
    private javax.swing.JToggleButton ledRed;
    private javax.swing.JToggleButton ledYellow;
    // End of variables declaration//GEN-END:variables
}
